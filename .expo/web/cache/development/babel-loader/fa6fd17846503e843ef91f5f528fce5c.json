{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { initArray } from \"../../util/3.array.util\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar dotCSSInfo = {\n  width: 10,\n  height: 10,\n  unit: \"px\"\n};\nvar inputTypePasswordCSSInfo = {\n  width: 100,\n  height: 20,\n  unit: \"px\"\n};\n\nvar AuroraPasswordInputComponent = function AuroraPasswordInputComponent() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      countAuroraDot = _useState4[0],\n      setCountAuroraDot = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      onOffCaret = _useState6[0],\n      setOnOffCaret = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isOnCaretHandler = _useState8[0],\n      setIsOnCaretHandler = _useState8[1];\n\n  var handleTextInputChange = function handleTextInputChange(event) {\n    setInputValue(event.target.value);\n    var arrayTemporary = initArray(event.target.value.length);\n    setCountAuroraDot(arrayTemporary);\n  };\n\n  var caretHandler = function caretHandler() {\n    var interval1 = setInterval(function () {\n      setOnOffCaret(false);\n    }, 530);\n    var interval2 = setInterval(function () {\n      setOnOffCaret(true);\n    }, 1060);\n  };\n\n  useEffect(function () {\n    caretHandler();\n  }, [isOnCaretHandler]);\n  return _jsxs(View, {\n    style: styles.membrane,\n    children: [_jsx(TextInput, {\n      onChange: handleTextInputChange,\n      value: inputValue,\n      style: styles.input_type_password\n    }), _jsxs(View, {\n      style: styles.dots_container,\n      children: [onOffCaret === true ? _jsx(View, {\n        style: styles.caret\n      }) : _jsx(Text, {}), countAuroraDot.map(function (e, index) {\n        return _jsx(View, {\n          style: styles.dot\n        }, index);\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  membrane: {\n    height: 20,\n    width: 100,\n    borderWidth: 1,\n    borderColor: \"#111\",\n    borderStyle: \"solid\"\n  },\n  input_type_password: {\n    borderWidth: 1,\n    borderColor: \"#111\",\n    borderStyle: \"solid\",\n    width: inputTypePasswordCSSInfo.width,\n    height: inputTypePasswordCSSInfo.height,\n    position: \"relative\",\n    color: \"#111\"\n  },\n  dot: {\n    height: dotCSSInfo.height,\n    width: dotCSSInfo.width,\n    backgroundImage: \"linear-gradient(to right, #00FF2F, #34EFC3,#94FFDA)\",\n    clipPath: \"circle(30%);\"\n  },\n  dots_container: {\n    borderRadius: 2,\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    padding: 12,\n    position: \"absolute\",\n    top: 30,\n    left: 0,\n    zIndex: 10\n  },\n  caret: {\n    width: 0.4,\n    height: 10,\n    backgroundImage: \"linear-gradient(to right, #00FF2F, #34EFC3,#94FFDA)\"\n  }\n});\nexport default AuroraPasswordInputComponent;","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/location-care/components/AuroraPasswordInput/AuroraPasswordInput.tsx"],"names":["useEffect","useState","initArray","dotCSSInfo","width","height","unit","inputTypePasswordCSSInfo","AuroraPasswordInputComponent","inputValue","setInputValue","countAuroraDot","setCountAuroraDot","onOffCaret","setOnOffCaret","isOnCaretHandler","setIsOnCaretHandler","handleTextInputChange","event","target","value","arrayTemporary","length","caretHandler","interval1","setInterval","interval2","styles","membrane","input_type_password","dots_container","caret","map","e","index","dot","StyleSheet","create","borderWidth","borderColor","borderStyle","position","color","backgroundImage","clipPath","borderRadius","display","flexDirection","padding","top","left","zIndex"],"mappings":";AAAA,SAAoBA,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;;;;;AAEA,SAASC,SAAT;;;AAEA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,MAAM,EAAE,EAFS;AAGjBC,EAAAA,IAAI,EAAE;AAHW,CAAnB;AAMA,IAAMC,wBAAwB,GAAG;AAC/BH,EAAAA,KAAK,EAAE,GADwB;AAE/BC,EAAAA,MAAM,EAAE,EAFuB;AAG/BC,EAAAA,IAAI,EAAE;AAHyB,CAAjC;;AAMA,IAAME,4BAA4B,GAAG,SAA/BA,4BAA+B,GAAM;AACzC,kBAAoCP,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAOQ,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA4CT,QAAQ,CAAgB,EAAhB,CAApD;AAAA;AAAA,MAAOU,cAAP;AAAA,MAAuBC,iBAAvB;;AACA,mBAAoCX,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOY,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAgDb,QAAQ,CAAC,KAAD,CAAxD;AAAA;AAAA,MAAOc,gBAAP;AAAA,MAAyBC,mBAAzB;;AAEA,MAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAgB;AAC5CR,IAAAA,aAAa,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACA,QAAMC,cAAc,GAAGnB,SAAS,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBE,MAApB,CAAhC;AACAV,IAAAA,iBAAiB,CAACS,cAAD,CAAjB;AACD,GAJD;;AAMA,MAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAMC,SAAS,GAAGC,WAAW,CAAC,YAAM;AAClCX,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAF4B,EAE1B,GAF0B,CAA7B;AAGA,QAAMY,SAAS,GAAGD,WAAW,CAAC,YAAM;AAClCX,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAF4B,EAE1B,IAF0B,CAA7B;AAGD,GAPD;;AASAd,EAAAA,SAAS,CAAC,YAAM;AACduB,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACR,gBAAD,CAFM,CAAT;AAIA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEY,MAAM,CAACC,QAApB;AAAA,eACE,KAAC,SAAD;AACE,MAAA,QAAQ,EAAEX,qBADZ;AAEE,MAAA,KAAK,EAAER,UAFT;AAGE,MAAA,KAAK,EAAEkB,MAAM,CAACE;AAHhB,MADF,EAOE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEF,MAAM,CAACG,cAApB;AAAA,iBACGjB,UAAU,KAAK,IAAf,GACC,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEc,MAAM,CAACI;AAApB,QADD,GAGC,KAAC,IAAD,KAJJ,EAMGpB,cAAc,CAACqB,GAAf,CAAmB,UAACC,CAAD,EAAIC,KAAJ;AAAA,eAClB,KAAC,IAAD;AAAkB,UAAA,KAAK,EAAEP,MAAM,CAACQ;AAAhC,WAAWD,KAAX,CADkB;AAAA,OAAnB,CANH;AAAA,MAPF;AAAA,IADF;AAoBD,CA7CD;;AA+CA,IAAMP,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC/BT,EAAAA,QAAQ,EAAE;AACRvB,IAAAA,MAAM,EAAE,EADA;AAERD,IAAAA,KAAK,EAAE,GAFC;AAGRkC,IAAAA,WAAW,EAAE,CAHL;AAIRC,IAAAA,WAAW,EAAE,MAJL;AAKRC,IAAAA,WAAW,EAAE;AALL,GADqB;AAQ/BX,EAAAA,mBAAmB,EAAE;AACnBS,IAAAA,WAAW,EAAE,CADM;AAEnBC,IAAAA,WAAW,EAAE,MAFM;AAGnBC,IAAAA,WAAW,EAAE,OAHM;AAInBpC,IAAAA,KAAK,EAAEG,wBAAwB,CAACH,KAJb;AAKnBC,IAAAA,MAAM,EAAEE,wBAAwB,CAACF,MALd;AAMnBoC,IAAAA,QAAQ,EAAE,UANS;AAOnBC,IAAAA,KAAK,EAAE;AAPY,GARU;AAiB/BP,EAAAA,GAAG,EAAE;AACH9B,IAAAA,MAAM,EAAEF,UAAU,CAACE,MADhB;AAEHD,IAAAA,KAAK,EAAED,UAAU,CAACC,KAFf;AAGHuC,IAAAA,eAAe,EAAE,qDAHd;AAIHC,IAAAA,QAAQ,EAAE;AAJP,GAjB0B;AAuB/Bd,EAAAA,cAAc,EAAE;AACde,IAAAA,YAAY,EAAE,CADA;AAEdzC,IAAAA,KAAK,EAAE,MAFO;AAGdC,IAAAA,MAAM,EAAE,MAHM;AAIdyC,IAAAA,OAAO,EAAE,MAJK;AAKdC,IAAAA,aAAa,EAAE,KALD;AAMdC,IAAAA,OAAO,EAAE,EANK;AAOdP,IAAAA,QAAQ,EAAE,UAPI;AASdQ,IAAAA,GAAG,EAAE,EATS;AAWdC,IAAAA,IAAI,EAAE,CAXQ;AAYdC,IAAAA,MAAM,EAAE;AAZM,GAvBe;AAqC/BpB,EAAAA,KAAK,EAAE;AACL3B,IAAAA,KAAK,EAAE,GADF;AAELC,IAAAA,MAAM,EAAE,EAFH;AAGLsC,IAAAA,eAAe,EAAE;AAHZ;AArCwB,CAAlB,CAAf;AA4CA,eAAenC,4BAAf","sourcesContent":["import { LegacyRef, useEffect, useState } from \"react\";\r\nimport { View, StyleSheet, createElement, TextInput, Text } from \"react-native\";\r\nimport { initArray } from \"../../util/3.array.util\";\r\n\r\nconst dotCSSInfo = {\r\n  width: 10,\r\n  height: 10,\r\n  unit: \"px\",\r\n};\r\n\r\nconst inputTypePasswordCSSInfo = {\r\n  width: 100,\r\n  height: 20,\r\n  unit: \"px\",\r\n};\r\n\r\nconst AuroraPasswordInputComponent = () => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [countAuroraDot, setCountAuroraDot] = useState<Array<Number>>([]);\r\n  const [onOffCaret, setOnOffCaret] = useState(false);\r\n  const [isOnCaretHandler, setIsOnCaretHandler] = useState(false);\r\n\r\n  const handleTextInputChange = (event: any) => {\r\n    setInputValue(event.target.value);\r\n    const arrayTemporary = initArray(event.target.value.length);\r\n    setCountAuroraDot(arrayTemporary);\r\n  };\r\n\r\n  const caretHandler = () => {\r\n    const interval1 = setInterval(() => {\r\n      setOnOffCaret(false);\r\n    }, 530);\r\n    const interval2 = setInterval(() => {\r\n      setOnOffCaret(true);\r\n    }, 1060);\r\n  };\r\n\r\n  useEffect(() => {\r\n    caretHandler();\r\n  }, [isOnCaretHandler]);\r\n\r\n  return (\r\n    <View style={styles.membrane}>\r\n      <TextInput\r\n        onChange={handleTextInputChange}\r\n        value={inputValue}\r\n        style={styles.input_type_password}\r\n      />\r\n\r\n      <View style={styles.dots_container}>\r\n        {onOffCaret === true ? (\r\n          <View style={styles.caret}></View>\r\n        ) : (\r\n          <Text></Text>\r\n        )}\r\n        {countAuroraDot.map((e, index) => (\r\n          <View key={index} style={styles.dot}></View>\r\n        ))}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  membrane: {\r\n    height: 20,\r\n    width: 100,\r\n    borderWidth: 1,\r\n    borderColor: \"#111\",\r\n    borderStyle: \"solid\",\r\n  },\r\n  input_type_password: {\r\n    borderWidth: 1,\r\n    borderColor: \"#111\",\r\n    borderStyle: \"solid\",\r\n    width: inputTypePasswordCSSInfo.width,\r\n    height: inputTypePasswordCSSInfo.height,\r\n    position: \"relative\",\r\n    color: \"#111\",\r\n  },\r\n  dot: {\r\n    height: dotCSSInfo.height,\r\n    width: dotCSSInfo.width,\r\n    backgroundImage: \"linear-gradient(to right, #00FF2F, #34EFC3,#94FFDA)\",\r\n    clipPath: \"circle(30%);\",\r\n  },\r\n  dots_container: {\r\n    borderRadius: 2,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    padding: 12,\r\n    position: \"absolute\",\r\n    // top: 2,\r\n    top: 30,\r\n\r\n    left: 0,\r\n    zIndex: 10,\r\n  },\r\n  caret: {\r\n    width: 0.4,\r\n    height: 10,\r\n    backgroundImage: \"linear-gradient(to right, #00FF2F, #34EFC3,#94FFDA)\",\r\n  },\r\n});\r\n\r\nexport default AuroraPasswordInputComponent;\r\n"]},"metadata":{},"sourceType":"module"}