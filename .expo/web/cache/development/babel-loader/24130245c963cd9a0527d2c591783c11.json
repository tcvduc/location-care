{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { initArray } from \"../../util/3.array.util\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar dotCSSInfo = {\n  width: 10,\n  height: 10,\n  unit: \"px\"\n};\nvar inputTypePasswordCSSInfo = {\n  width: 100,\n  height: 20,\n  unit: \"px\"\n};\nvar interval1;\nvar interval2;\n\nvar AuroraPasswordInputComponent = function AuroraPasswordInputComponent() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      countAuroraDot = _useState4[0],\n      setCountAuroraDot = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      onOffCaret = _useState6[0],\n      setOnOffCaret = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isOnCaretHandler = _useState8[0],\n      setIsOnCaretHandler = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isTextInputOnFocus = _useState10[0],\n      setIsTextInputOnFocus = _useState10[1];\n\n  var handleTextInputOnFocus = function handleTextInputOnFocus(event) {\n    console.log(\"is focus\");\n    setIsTextInputOnFocus(isTextInputOnFocus);\n  };\n\n  var handleTextInputOnChange = function handleTextInputOnChange(event) {\n    setInputValue(event.target.value);\n    var arrayTemporary = initArray(event.target.value.length);\n    setCountAuroraDot(arrayTemporary);\n    clearInterval(interval1);\n    clearInterval(interval2);\n    setOnOffCaret(true);\n    setTimeout(function () {\n      setIsOnCaretHandler(!isOnCaretHandler);\n    }, 200);\n  };\n\n  var caretOnOffHandler = function caretOnOffHandler() {\n    interval1 = setInterval(function () {\n      setOnOffCaret(false);\n    }, 530);\n    interval2 = setInterval(function () {\n      setOnOffCaret(true);\n    }, 1060);\n  };\n\n  useEffect(function () {\n    caretOnOffHandler();\n  }, [isOnCaretHandler]);\n  return _jsxs(View, {\n    style: styles.membrane,\n    children: [_jsx(TextInput, {\n      onChange: handleTextInputOnChange,\n      onFocus: handleTextInputOnFocus,\n      value: inputValue,\n      style: styles.input_type_password\n    }), _jsxs(View, {\n      style: styles.dots_container,\n      children: [countAuroraDot.map(function (e, index) {\n        return _jsx(View, {\n          style: styles.dot\n        }, index);\n      }), onOffCaret === true ? _jsx(View, {\n        style: styles.caret\n      }) : _jsx(Text, {})]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  membrane: {\n    height: 20,\n    width: 100\n  },\n  input_type_password: {\n    outline: \"none\",\n    borderWidth: 1,\n    borderColor: \"red\",\n    borderStyle: \"solid\"\n  },\n  dot: {\n    height: dotCSSInfo.height,\n    width: dotCSSInfo.width,\n    backgroundImage: \"linear-gradient(to bottom, #88F29C, #34EFC3,#94FFDA)\",\n    clipPath: \"circle(30%);\"\n  },\n  dots_container: {\n    borderRadius: 2,\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    padding: 12,\n    position: \"absolute\",\n    top: 30,\n    left: 0,\n    zIndex: 10\n  },\n  caret: {\n    width: 0.4,\n    height: 10,\n    backgroundImage: \"linear-gradient(to bottom, #88F29C, #34EFC3,#94FFDA)\"\n  }\n});\nexport default AuroraPasswordInputComponent;","map":{"version":3,"sources":["C:/Users/LENOVO/Desktop/location-care/components/AuroraPasswordInput/AuroraPasswordInput.tsx"],"names":["useEffect","useState","initArray","dotCSSInfo","width","height","unit","inputTypePasswordCSSInfo","interval1","interval2","AuroraPasswordInputComponent","inputValue","setInputValue","countAuroraDot","setCountAuroraDot","onOffCaret","setOnOffCaret","isOnCaretHandler","setIsOnCaretHandler","isTextInputOnFocus","setIsTextInputOnFocus","handleTextInputOnFocus","event","console","log","handleTextInputOnChange","target","value","arrayTemporary","length","clearInterval","setTimeout","caretOnOffHandler","setInterval","styles","membrane","input_type_password","dots_container","map","e","index","dot","caret","StyleSheet","create","outline","borderWidth","borderColor","borderStyle","backgroundImage","clipPath","borderRadius","display","flexDirection","padding","position","top","left","zIndex"],"mappings":"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","sourcesContent":["import { LegacyRef, useEffect, useState } from \"react\";\r\nimport { View, StyleSheet, createElement, TextInput, Text } from \"react-native\";\r\nimport { initArray } from \"../../util/3.array.util\";\r\n\r\nconst dotCSSInfo = {\r\n  width: 10,\r\n  height: 10,\r\n  unit: \"px\",\r\n};\r\n\r\nconst inputTypePasswordCSSInfo = {\r\n  width: 100,\r\n  height: 20,\r\n  unit: \"px\",\r\n};\r\n\r\nlet interval1: any;\r\nlet interval2: any;\r\n\r\nconst AuroraPasswordInputComponent = () => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [countAuroraDot, setCountAuroraDot] = useState<Array<Number>>([]);\r\n  const [onOffCaret, setOnOffCaret] = useState(false);\r\n  const [isOnCaretHandler, setIsOnCaretHandler] = useState(false);\r\n  const [isTextInputOnFocus, setIsTextInputOnFocus] = useState(false);\r\n\r\n  const handleTextInputOnFocus = (event: any) => {\r\n    console.log(\"is focus\");\r\n\r\n    setIsTextInputOnFocus(isTextInputOnFocus);\r\n  };\r\n\r\n  const handleTextInputOnChange = (event: any) => {\r\n    setInputValue(event.target.value);\r\n    const arrayTemporary = initArray(event.target.value.length);\r\n    setCountAuroraDot(arrayTemporary);\r\n\r\n    clearInterval(interval1);\r\n    clearInterval(interval2);\r\n    setOnOffCaret(true);\r\n\r\n    setTimeout(() => {\r\n      setIsOnCaretHandler(!isOnCaretHandler);\r\n    }, 200);\r\n  };\r\n\r\n  const caretOnOffHandler = () => {\r\n    interval1 = setInterval(() => {\r\n      setOnOffCaret(false);\r\n    }, 530);\r\n    interval2 = setInterval(() => {\r\n      setOnOffCaret(true);\r\n    }, 1060);\r\n  };\r\n\r\n  useEffect(() => {\r\n    caretOnOffHandler();\r\n  }, [isOnCaretHandler]);\r\n\r\n  return (\r\n    <View style={styles.membrane}>\r\n      <TextInput\r\n        onChange={handleTextInputOnChange}\r\n        onFocus={handleTextInputOnFocus}\r\n        value={inputValue}\r\n        style={styles.input_type_password}\r\n      />\r\n\r\n      <View style={styles.dots_container}>\r\n        {countAuroraDot.map((e, index) => (\r\n          <View key={index} style={styles.dot}></View>\r\n        ))}\r\n        {onOffCaret === true ? (\r\n          <View style={styles.caret}></View>\r\n        ) : (\r\n          <Text></Text>\r\n        )}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\nconst styles = StyleSheet.create({\r\n  membrane: {\r\n    height: 20,\r\n    width: 100,\r\n  },\r\n  input_type_password: {\r\n    outline: \"none\",\r\n    borderWidth: 1,\r\n    borderColor: \"red\",\r\n    borderStyle: \"solid\",\r\n    // width: inputTypePasswordCSSInfo.width,\r\n    // height: inputTypePasswordCSSInfo.height,\r\n    // position: \"relative\",\r\n  },\r\n\r\n  dot: {\r\n    height: dotCSSInfo.height,\r\n    width: dotCSSInfo.width,\r\n    backgroundImage: \"linear-gradient(to bottom, #88F29C, #34EFC3,#94FFDA)\",\r\n    clipPath: \"circle(30%);\",\r\n  },\r\n  dots_container: {\r\n    borderRadius: 2,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    padding: 12,\r\n    position: \"absolute\",\r\n    // top: 2,\r\n    top: 30,\r\n\r\n    left: 0,\r\n    zIndex: 10,\r\n  },\r\n  caret: {\r\n    width: 0.4,\r\n    height: 10,\r\n    backgroundImage: \"linear-gradient(to bottom, #88F29C, #34EFC3,#94FFDA)\",\r\n  },\r\n});\r\n\r\nexport default AuroraPasswordInputComponent;\r\n"]},"metadata":{},"sourceType":"module"}